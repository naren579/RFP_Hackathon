0, -1, -2, or seconds since January 1, 1970 at 00:00:00. To change this value, you can specify any of these values, any of the valid values for the retention-string property, or an offset.

shred

The shred setting for the object, either true (shred) or false (don’t shred).

uid

The POSIX user ID for the object.

You can retrieve, but not change, the value of this property. update-time

The value of the POSIX mtime attribute for the object.

You can retrieve, but not change, the value of this property.

Storing dead properties as custom metadata

HCP can be configured to store WebDAV dead properties as custom metadata for an object. When HCP is configured this way, you use the PROPPATCH and PROPFIND methods to store and retrieve dead properties just as you do for live properties.

This is the only way HCP can store dead properties. If a namespace is not configured to store dead properties as custom metadata and you try to store dead properties, HCP returns an HTTP 404 (Not Found) error code.

To have a namespace configured to store dead properties as custom metadata file, contact your tenant administrator.

As with custom metadata accessed using WebDAV, dead properties are stored in the default annotation. This annotation is represented by the custom-metadata.xml file Using the PROPPATCH method, you can change individual dead properties in the default annotation. You do not need to replace the entire annotation as you do when you use it for custom metadata.

You can use the default annotation to store either custom metadata or dead properties, but not both:

If, after using the annotation for custom metadata, you try to store dead properties, HCP returns an HTTP 409 (Conflict) error code. In this case, you need to delete the existing annotation before you can store dead properties for the object.

If, after storing dead properties, you replace the annotation content with new custom metadata, the dead properties you stored are lost. WebDAV status codes

The table below describes the possible status codes for WebDAV requests against namespaces.

Code

Meaning

Description

200

OK

GET, HEAD, PROPPATCH, or LOCK: HCP successfully completed the request.

201

Created

PUT, MKCOL, COPY, or MOVE: HCP successfully completed the request. (For COPY or MOVE, no object

existed at the target location.)

204

No Content

COPY, MOVE, or DELETE: HCP successfully completed the request. (For COPY or MOVE, a deletable object existed at the target location.)

https://docs.hitachivantara.com/internal/api/webapp/print/72cda581-a515-4975-93dd-f591140b46a3

792/907

6/25/24, 11:34 AM

Content Platform System Management Help

Code

Meaning

Description

GET, HEAD, or DELETE of custom metadata: The specified object exists but does not have a default annotation.

206 Partial Content

GET: HCP successfully retrieved the data in the byte range specified in the request.

207

Multi-status

PROPPATCH, PROPFIND, or DELETE for a directory: The operation generated multiple status codes. The

response body contains an XML document that shows the status codes and the names of the objects to which they apply.

400 Bad Request

All methods: The request is not well-formed. Correct the request and try again.

PROPPATCH or PROPFIND: The request XML is invalid.

PUT: For a request to add or replace custom metadata, the namespace is configured with custom

metadata XML checking enabled, and the request includes custom metadata that is not well-formed XML.

COPY or MOVE: The request does not specify the full URL for the target location.

403 Forbidden

For all methods, one of:

The namespace does not exist.

The WebDAV protocol is not enabled for the namespace. The URL specifies https and the namespace configuration does not support SSL. You don’t have permission to perform the requested operation.

MKDIR: You cannot create a directory in the specified location.

PROPPATCH: The requested change is not allowed.