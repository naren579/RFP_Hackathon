{ "grant": [{ "grantee": { "name":"all_users", "type":"group" }, "permissions": { "permission":["READ"] }

}] "grant": [{ "grantee": { "name":"lgreen", "type":"user", "domain":"ad.example.com" }, "permissions": { "permission":["WRITE"] } }] "grant": [{ "grantee": { "name":"pdgrey", "type":"user" }, "permissions": { "permission":["WRITE","DELETE"]

} }] } ETags

An ETag is an identifier for the content of an object. HCP generates an ETag for each object or version stored in a namespace. HCP returns the ETag for an object or version in an ETag header in the response to a GET, HEAD, or PUT request for that object or version. If HCP has not yet generated the ETag for an object or version, the ETag header is not

included in the response.

You can use ETags in conditional operations. For example, you could use an If-None-Match header to store a new version of an object only if the content of that new version does not match the content of the current version.

Replication collision handling

If clients can write to multiple systems in a replication topology, collisions can occur when different changes are made to the same objects on different systems. Similarly, if you can make configuration changes to the tenant and its namespaces on multiple systems in a replication topology, configuration collisions can occur. The way HCP handles collisions that occur due to replication depends on the type of collision. However, the general rule is that more recent changes have priority over conflicting less recent changes. Object content collisions

An object content collision occurs when, for a namespace without versioning enabled, these events occur in the order shown:

1. An object is created with the same name in that namespace on two systems in a replication topology, but the object has different content on the two systems. 2. The object on one of the systems is replicated to the other system.

If versioning is enabled, no collision occurs. Instead, the less recently created of the two objects becomes an old version of the more recently created object.

When an object content collision occurs, the more recently created object keeps its name and location. The other object is either moved to the .lost+found directory in the same namespace or renamed, depending on the namespace configuration.

When HCP moves an object to the .lost+found directory, the full object path becomes .lost+found/replication/system-generated-directory/ old-object-path. https://docs.hitachivantara.com/internal/api/webapp/print/72cda581-a515-4975-93dd-f591140b46a3

708/907

6/25/24, 11:34 AM

Content Platform System Management Help

When renaming an object due to a content collision, HCP changes the object name to object-name.collision or object-name.version-id.collision, where version-id is the version ID of the object. HCP uses the second format only if versioning has ever been enabled for the namespace that contains the object but is not currently enabled.

If the new name is already in use, HCP changes the object name to object-name.1.collision or object-name.version-id.1.collision, as applicable. If that name is already in use, HCP successively increments the middle integer by one until a unique name is formed.

Objects that have been relocated or renamed due to content collisions are flagged as replication collisions in their system metadata. Clients can use the metadata query API to search for objects that are flagged as replication collisions. If an object thatâ€™s flagged as a replication collision changes (for example, if its retention period is extended), its collision flag is removed. If a client creates a copy of a flagged object with a new name, the collision flag is not set on the copy.

You can configure namespaces to have the DIsposition service automatically delete objects that are flagged as replication collisions. When selecting this option for a namespace, you specify the number of days the DIsposition service should wait before deleting such an object. The days are counted from the time the collision flag is set. If the collision flag is removed from an object, the object is no longer eligible for deletion by the DIsposition service.

System metadata collisions