import java.security.cert.KeyStore import java.security.cert.KeyStoreException

/** * HCP Management API - Sample Java Application */ public class MAPISample {

private AbstractHttpClient httpClient = null; private String protocol; private int port; private String uname64; private String encodedPassword; private String hcpSystemAddr;

private enum RequestType { PUT, POST;

}

public class HCPNotInitializedException extends Exception { public HCPNotInitializedException(String msg) { super("HTTP client could not be initialized in HCPAdapter for the " + "following reason: " + msg); } }

public static void main(String [] args) { MAPISample adapter = null; try { adapter = new MAPISample();

// Switch the adapter to the initial user account for the new tenant. adapter.setUpSystemInfo(hcpSystemAddr, tenantUser, tenantPassword);

// Modify the initial user account, using lgreen-UAroles.json as input.

f = new File("/home/rsilver/MAPI/lgreen-UAroles.json"); adapter.modifylUserAccount(tenantName, tenantUser, f);

// Create a user account for compliance, using mwhite-UA.json as input // and specifying start123 as the account password.

https://docs.hitachivantara.com/internal/api/webapp/print/72cda581-a515-4975-93dd-f591140b46a3

535/907

6/25/24, 11:34 AM

Content Platform System Management Help f = new File("/home/rsilver/MAPI/mwhite-UA.json"); adapter.createTenantUserAccount(tenantName, "start123", f);

// Configure the Tenant Management Console, using FinanceMgmtConsole.json // as input. f = new File("/home/rsilver/MAPI/FinanceMgmtConsole.json"); adapter.configureTenantSecurity(tenantName, f);

// Modify the tenant, using modFinance.json as input. f = new File("/home/rsilver/MAPI/modFinance.json"); adapter.modifyTenant(tenantName, f);

// Create a namespace, using AccountsRecNS.json as input. f = new File("/home/rsilver/MAPI/AccountsRecNS.json"); adapter.createNamespace(tenantName, f);

// Create a namespace, using AccountsPayNS.json as input. f = new File("/home/rsilver/MAPI/AccountsPayNS.json"); adapter.createNamespace(tenantName, f); // Modify the Accounts-Receivable namespace, using // AcctsRecCompliance.json as input. String namespaceName = "Accounts-Receivable"; f = new File("/home/rsilver/MAPI/AcctsRecCompliance.json"); adapter.modifyNamespace(namespaceName, tenantName, f);

// Configure the REST API for the Accounts-Receivable namespace, using http.json // as input. String namespaceName = "Accounts-Receivable"; f = new File("/home/rsilver/MAPI/http.json"); adapter.modifyNamespaceHTTP(namespaceName, tenantName, f);

// Configure the REST API for the Accounts-Payable namespace, using http.json // as input. String namespaceName = "Accounts-Payable"; f = new File("/home/rsilver/MAPI/http.json"); adapter.modifyNamespaceHTTP(namespaceName, tenantName, f);

// Create a user account with no roles, using pblack-UA.json as input

// and specifying start123 as the account password. f = new File("/home/rsilver/MAPI/pblack-UA.json"); adapter.createTenantUserAccount(tenantName, "start123", f); // Modify the user account, using pblack-UAperms.json as input. String userAcctName = "pblack" f = new File("/home/rsilver/MAPI/pblack-UAperms.json"); adapter.changeDataUserAccountPerms(userAcctName, tenantName, f);