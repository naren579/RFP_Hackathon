Changes the atime value to

A time later than the current date and time

Initial Unspecified (-2) or Deletion Allowed (0)

The same time as the new retention setting A time later than the current retention setting

A specific date and time

The same time as the new retention setting

A time before the current date and time

Initial Unspecified (-2) or Deletion Allowed (0)

The same time as the new retention setting

Deletion Allowed

Initial Unspecified (-2)

January 1, 1970 00:00:00 GMT Deletion Prohibited

Initial Unspecified (-2), Deletion Allowed (0), or

The current date and time minus the threshold beyond which atime sets retention to Deletion Prohibited*

a specific date and time

Twenty-four hours is the default setting for this threshold. If you want it changed, please contact your tenant administrator.

If atime synchronization has already been triggered for an object and the object is under retention, you cannot use atime to change its retention setting while HCP is configured to disallow permission changes for objects under retention. However, you can modify the setting in retention.txt, and, when you do so, the atime value is synchronized with the new retention setting. atime synchronization example

The following example shows how to use the atime attribute to trigger retention for the existing wind.jpg object after atime synchronization has been enabled for the namespace; the example uses the NFS protocol:

1. (Optional) Check the current retention setting for the wind.jpg object: cat /metadatamount/images/wind.jpg/retention.txt 0 Deletion Allowed

2. (Optional) Check the current permissions for the wind.jpg object:

ls -l /datamount/images/wind.jpg -r--r--r-- 1 root root 23221 Mar 19 09:45 /datamount/images/wind.jpg

Notice that the object has no write permissions.

3. Set the atime attribute for the wind.jpg object: touch -a -t 201512310000 /datamount/images/wind.jpg

Note: To set the value of the atime attribute, you can use the Windows SetFileTime library call, the Unix utime library call, or the Unix touch command.

4. (Optional) Verify step 3:

stat /datamount/images/wind.jpg File: "/datamount/images/wind.jpg"

Size: 23221 Blocks: 112 IO Block: 32768 regular file Device: 15h/21d Inode: 18 Links: 1 Access: (0444/-r--r--r--) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2015-12-31 00:00:00.000000000 -0500 Modify: 2012-03-19 09:45:18.000000000 -0400 Change: 2012-03-23 13:10:17.000000000 -0400

5. Add write permissions to the wind.jpg object: chmod a+w /datamount/images/wind.jpg

6. Remove all write permissions from the wind.jpg object:

chmod a-w /datamount/images/wind.jpg

7. (Optional) Verify that the retention setting has changed to match the atime value:

cat /metadatamount/images/wind.jpg/retention.txt 1451520000 2015-12-31T00:00:00-0500 S3 Object Lock

HCP supports S3 Object Lock that enables you to store objects using a write-once-read-many (WORM) models. It helps prevent objects from being deleted or overwritten for a specified period. HCP helps you meet regulatory requirements and provides protection against accidental deletion of objects.

HCP supports the following S3 Object Lock features:

Retention modes: You can choose one of these retention modes for any object version protected by S3 Object Lock.