appending a new line to the output. This is required to ensure correct Base64 and MD5 values. Authorization header

You use the HTTP Authorization request header to provide the authentication token for an HCP management API request. The value of this header is HCP followed by the authentication token, in this format:

Authorization: HCP authentication-token

For example, here’s the Authorization header for a user named lgreen and password p4ssw0rd: Authorization: HCP bGdyZWVu:2a9d119df47ff993b662a8ef36f9ea20

Specifying the Authorization header with cURL

With cURL, you use the -H option to specify a header. So, for example, a request to list the tenants for the HCP system named hcp.example.com might look like this:

curl -k -i -H "Authorization: HCP bGdyZWVu:2a9d119df47ff993b662a8ef36f9ea20"

H "Accept: application/xml" "https://admin.hcp.example.com:9090/mapi/tenants"

Specifying the authentication header in Python with PycURL

In Python with PycURL, you use the HTTPHEADER option to specify a header, as in this example: curl.setopt(pycurl.HTTPHEADER, ["Authorization: HCP bGdyZWVu:2a9d119df47ff993b662a8ef36f9ea20"])

Active Directory user authentication through the REST API

To authenticate to HCP with Active Directory, construct an authentication token from a AD user account, and then submit it using a request header with all requests. The user name

and password does not need to be encoded.

Note: If AD single sign-on is enabled for the namespace and you want to access the namespace anonymously, you need to specify all_users in plain text as the user name and not specify a password. Active Directory authentication token

An AD authentication token consists of an AD username and password separated by a colon, like this:

AD-username:AD-password

For example, here’s the token for the username lgreen and the password p4ssw0rd:

lgreen@example.com:p4sswOrd

Active Directory authorization header

You use the HTTP Authorization request header to provide the authentication token for an AD user accessing HCP through the management API. The value of this header is AD followed by the authentication token, in this format: Authorization: AD authentication-token

For example, here’s the Authorization header for a user named lgreen and password p4ssw0rd:

Authorization: AD lgreen@example.com:p4sswOrd

Specifying the Authorization header with cURL

With cURL, you use the -H option to specify a header. So, for example, a request to list the tenants for the HCP system named hcp.example.com might look like this: curl -i -k -H "Authorization: AD lgreen@example.com:p4sswOrd" "Accept: application/xml" "https://admin.hcp.example.com:9090/mapi/tenants"

Specifying the authentication header in Python with PycURL

Tip: After you log in using the authorization AD header, the response header replies with an hcap Set-Cookie value. You can use this cookie for subsequent authentication requests instead of using the authoriation AD header. For example: curl -ik -b HCAP-Login="acmepKMUfWLEu"

"https://tenant.hcp.example.com:9090/mapi/tenants"

In Python with PycURL, you use the HTTPHEADER option to specify a header, as in this example: curl.setopt(pycurl.HTTPHEADER, ["Authorization: AD

lgreen@example.com:p4sswOrd"])

Transmitting data in compressed format

To save bandwidth, you can compress object data, an annotation, or an ACL in GZIP format before sending it to HCP. In the PUT request, you tell HCP that data is compressed so

that HCP knows to decompress the data before storing it.